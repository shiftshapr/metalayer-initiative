// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role { OWNER MODERATOR MEMBER VISITOR }

enum Visibility { PUBLIC COMMUNITY GROUP PRIVATE CUSTOM }

enum Status { OPEN RESOLVED ARCHIVED FLAGGED }

enum ReactionKind { AGREE QUESTION CITE FLAG DISAGREE }

enum PresenceEventKind { ENTER HEARTBEAT EXIT AVAILABILITY }

enum Availability { AVAILABLE BUSY AWAY CUSTOM }

enum AnchorType { PAGE REGION TEXT MEDIA COMPOSITE }

model AppUser {
  id             String            @id @default(uuid()) @db.Uuid
  handle         String            @unique
  email          String?           @unique
  createdAt      DateTime          @default(now())
  spaces         SpaceMember[]
  conversations  Conversation[]    @relation("ConversationCreatedBy")
  posts          Post[]
  reactions      Reaction[]
  presenceEvents PresenceEvent[]
}

model Space {
  id        String         @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime       @default(now())
  members   SpaceMember[]
  pages     Page[]
}

model SpaceMember {
  space     Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId   String  @db.Uuid
  user      AppUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @db.Uuid
  role      Role
  @@id([spaceId, userId])
}

model Page {
  id               String         @id @default(uuid()) @db.Uuid
  space            Space          @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId          String         @db.Uuid
  url              String
  canonicalUrl     String
  latestSnapshot   PageSnapshot?  @relation("LatestSnapshot", fields: [latestSnapshotId], references: [id])
  latestSnapshotId String?        @db.Uuid
  snapshots        PageSnapshot[]
  conversations    Conversation[]
  @@unique([spaceId, canonicalUrl])
}

model PageSnapshot {
  id            String    @id @default(uuid()) @db.Uuid
  page          Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId        String    @db.Uuid
  contentHash   Bytes
  simhash       BigInt
  etag          String?
  lastModified  DateTime?
  screenshotKey String?
  createdAt     DateTime  @default(now())
  anchors       Anchor[]
}

model Anchor {
  id              String        @id @default(uuid()) @db.Uuid
  pageSnapshot    PageSnapshot  @relation(fields: [pageSnapshotId], references: [id], onDelete: Cascade)
  pageSnapshotId  String        @db.Uuid
  type            AnchorType
  selectors       Json
  bbox            Json?
  media           Json?
  snippet         String?
  confidence      Float         @default(1.0)
  createdAt       DateTime      @default(now())
  conversations   Conversation[]
  @@index([pageSnapshotId])
}

model Conversation {
  id          String       @id @default(uuid()) @db.Uuid
  page        Page         @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId      String       @db.Uuid
  anchor      Anchor?      @relation(fields: [anchorId], references: [id])
  anchorId    String?
  visibility  Visibility
  title       String?
  tags        String[]
  status      Status       @default(OPEN)
  createdBy   AppUser      @relation("ConversationCreatedBy", fields: [createdById], references: [id])
  createdById String       @db.Uuid
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  posts       Post[]
  reactions   Reaction[]
  @@index([pageId, updatedAt(sort: Desc)], map: "conversation_list_ix")
}

model Post {
  id              String        @id @default(uuid()) @db.Uuid
  conversation    Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId  String        @db.Uuid
  parent          Post?         @relation("PostToPost", fields: [parentId], references: [id], onDelete: SetNull)
  parentId        String?
  children        Post[]        @relation("PostToPost")
  author          AppUser       @relation(fields: [authorId], references: [id])
  authorId        String        @db.Uuid
  body            String
  attachments     Json?
  createdAt       DateTime      @default(now())
  editedAt        DateTime?
  visibilityOverride Visibility?
  deletedAt       DateTime?
  reactions       Reaction[]
  @@index([conversationId, createdAt], map: "post_list_ix")
}

model Reaction {
  id              String          @id @default(uuid()) @db.Uuid
  user            AppUser         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String          @db.Uuid
  conversation    Conversation?   @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId  String?
  post            Post?           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId          String?
  kind            ReactionKind
  createdAt       DateTime        @default(now())
  @@unique([userId, conversationId, postId], map: "unique_user_target")
}

model PresenceEvent {
  id          BigInt            @id @default(autoincrement())
  page        Page              @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId      String            @db.Uuid
  user        AppUser           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String            @db.Uuid
  kind        PresenceEventKind
  availability Availability?
  customLabel String?
  createdAt   DateTime          @default(now())
}

model ModerationAction {
  id         String   @id @default(uuid()) @db.Uuid
  actor      AppUser  @relation(fields: [actorId], references: [id])
  actorId    String   @db.Uuid
  targetType String
  targetId   String
  action     String
  reason     String?
  createdAt  DateTime @default(now())
}
